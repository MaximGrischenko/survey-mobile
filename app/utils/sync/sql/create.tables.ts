export const TABLES=`
CREATE TABLE IF NOT EXISTS "users" ("id"   SERIAL , "email" VARCHAR(255) UNIQUE, "password" VARCHAR(255), "firstName" VARCHAR(255), "secondName" VARCHAR(255), "role" INTEGER DEFAULT 3 , "status" INTEGER DEFAULT 1, "token" VARCHAR(255), "tempForgotPswLink" VARCHAR(255), "birthday" TIMESTAMP WITH TIME ZONE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "deletedAt" TIMESTAMP WITH TIME ZONE, "userId" INTEGER REFERENCES "users" ("id") ON DELETE CASCADE ON UPDATE CASCADE, PRIMARY KEY ("id")); COMMENT ON COLUMN "users"."role" IS 'USER role for access';
--SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a, pg_namespace s WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' AND s.oid = t.relnamespace AND s.nspname = 'survey_temp_demo' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
--DROP TABLE IF EXISTS "projects" CASCADE;
CREATE TABLE IF NOT EXISTS "projects" ("id"   SERIAL , "title" VARCHAR(255), "contractor" VARCHAR(255), "status" INTEGER DEFAULT 1, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "deletedAt" TIMESTAMP WITH TIME ZONE, PRIMARY KEY ("id"));
--SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a, pg_namespace s WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'projects' AND s.oid = t.relnamespace AND s.nspname = 'survey_temp_demo' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
--DROP TABLE IF EXISTS "powerlines" CASCADE;
CREATE TABLE IF NOT EXISTS "powerlines" ("id"   SERIAL , "title" VARCHAR(255), "status" INTEGER DEFAULT 1, "comment" VARCHAR(255), "userId" INTEGER NOT NULL REFERENCES "users" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "deletedAt" TIMESTAMP WITH TIME ZONE, PRIMARY KEY ("id"));
--SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a, pg_namespace s WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'powerlines' AND s.oid = t.relnamespace AND s.nspname = 'survey_temp_demo' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
--DROP TABLE IF EXISTS "poles" CASCADE;
CREATE TABLE IF NOT EXISTS "poles" ("id"   SERIAL , "title" VARCHAR(255), "description" VARCHAR(255), "comment" VARCHAR(255), "type" INTEGER, "num_slup" VARCHAR(255), "layer" VARCHAR(255), "status" INTEGER DEFAULT 1, "powerLineId" INTEGER NOT NULL REFERENCES "powerlines" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "userId" INTEGER NOT NULL REFERENCES "users" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "projectId" INTEGER NOT NULL REFERENCES "projects" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "points" TEXT, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "deletedAt" TIMESTAMP WITH TIME ZONE, PRIMARY KEY ("id"));
--SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a, pg_namespace s WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'poles' AND s.oid = t.relnamespace AND s.nspname = 'survey_temp_demo' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
--DROP TABLE IF EXISTS "categories" CASCADE;
CREATE TABLE IF NOT EXISTS "categories" ("id"   SERIAL , "title" VARCHAR(255), "comment" VARCHAR(255), "userId" INTEGER NOT NULL REFERENCES "users" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "deletedAt" TIMESTAMP WITH TIME ZONE, PRIMARY KEY ("id"));
--SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a, pg_namespace s WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'categories' AND s.oid = t.relnamespace AND s.nspname = 'survey_temp_demo' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
--DROP TABLE IF EXISTS "segments" CASCADE;
CREATE TABLE IF NOT EXISTS "segments" ("id"   SERIAL , "title" VARCHAR(255), "comment" VARCHAR(255), "description" VARCHAR(255), "nazwa_linii" VARCHAR(255), "nazwa_ciagu_id" VARCHAR(255), "NAZWA_TAB" VARCHAR(255), "przeslo" VARCHAR(255), "status" VARCHAR(255) DEFAULT 'service', "vegetation_status" INTEGER DEFAULT 0, "distance_lateral" INTEGER, "distance_bottom" INTEGER, "shutdown_time" INTEGER, "track" INTEGER, "operation_type" VARCHAR(255), "time_of_operation" INTEGER, "time_for_next_entry" VARCHAR(255), "parcel_number_for_permit" INTEGER, "notes" VARCHAR(255), "powerLineId" INTEGER NOT NULL REFERENCES "powerlines" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "projectId" INTEGER NOT NULL REFERENCES "projects" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "userId" INTEGER NOT NULL REFERENCES "users" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "points" TEXT, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "deletedAt" TIMESTAMP WITH TIME ZONE, PRIMARY KEY ("id"));
--SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a, pg_namespace s WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'segments' AND s.oid = t.relnamespace AND s.nspname = 'survey_temp_demo' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
--DROP TABLE IF EXISTS "stations" CASCADE;
CREATE TABLE IF NOT EXISTS "stations" ("id"   SERIAL , "title" VARCHAR(255), "description" VARCHAR(255), "nazw_stac" VARCHAR(255), "num_eksp_s" VARCHAR(255), "comment" VARCHAR(255), "type" INTEGER, "status" INTEGER DEFAULT 1, "userId" INTEGER NOT NULL REFERENCES "users" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "projectId" INTEGER NOT NULL REFERENCES "projects" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "points" TEXT, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "deletedAt" TIMESTAMP WITH TIME ZONE, PRIMARY KEY ("id"));
--SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a, pg_namespace s WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'stations' AND s.oid = t.relnamespace AND s.nspname = 'survey_temp_demo' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
--DROP TABLE IF EXISTS "pois" CASCADE;
CREATE TABLE IF NOT EXISTS "pois" ("id"   SERIAL , "title" VARCHAR(255), "description" VARCHAR(255), "points" TEXT, "comment" VARCHAR(255), "status" INTEGER DEFAULT 1, "userId" INTEGER NOT NULL REFERENCES "users" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "projectId" INTEGER NOT NULL REFERENCES "projects" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "categoryId" INTEGER REFERENCES "categories" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "deletedAt" TIMESTAMP WITH TIME ZONE, PRIMARY KEY ("id"));
--SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a, pg_namespace s WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'pois' AND s.oid = t.relnamespace AND s.nspname = 'survey_temp_demo' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
--DROP TABLE IF EXISTS "logs" CASCADE;
CREATE TABLE IF NOT EXISTS "logs" ("id"   SERIAL , "action" VARCHAR(255), "ip" VARCHAR(255), "description" VARCHAR(1500), "userId" INTEGER NOT NULL REFERENCES "users" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "deletedAt" TIMESTAMP WITH TIME ZONE, PRIMARY KEY ("id"));
--SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a, pg_namespace s WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'logs' AND s.oid = t.relnamespace AND s.nspname = 'survey_temp_demo' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
--DROP TABLE IF EXISTS "uploads" CASCADE;
CREATE TABLE IF NOT EXISTS "uploads" ("id"   SERIAL , "path" VARCHAR(255), "metada" VARCHAR(255), "userId" INTEGER NOT NULL REFERENCES "users" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "deletedAt" TIMESTAMP WITH TIME ZONE, PRIMARY KEY ("id"));
--SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a, pg_namespace s WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'uploads' AND s.oid = t.relnamespace AND s.nspname = 'survey_temp_demo' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
--DROP TABLE IF EXISTS "project_powerlines" CASCADE;
CREATE TABLE IF NOT EXISTS "project_powerlines" ("powerlineId" INTEGER NOT NULL  REFERENCES "powerlines" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "comment" VARCHAR(255), "projectId" INTEGER NOT NULL  REFERENCES "projects" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "status" INTEGER DEFAULT 1, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "deletedAt" TIMESTAMP WITH TIME ZONE, UNIQUE ("powerlineId", "projectId"), PRIMARY KEY ("powerlineId","projectId"));
--SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a, pg_namespace s WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'project_powerlines' AND s.oid = t.relnamespace AND s.nspname = 'survey_temp_demo' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
--DROP TABLE IF EXISTS "parcels" CASCADE;
CREATE TABLE IF NOT EXISTS "parcels" ("id"   SERIAL , "comment" VARCHAR(255), "title" VARCHAR(255), "points" TEXT, "wojewodztw" VARCHAR(255), "gmina" VARCHAR(255), "description" VARCHAR(255), "numer" VARCHAR(255), "status" INTEGER DEFAULT 1, "userId" INTEGER NOT NULL REFERENCES "users" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "powerLineId" INTEGER NOT NULL REFERENCES "powerlines" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "projectId" INTEGER NOT NULL REFERENCES "projects" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "deletedAt" TIMESTAMP WITH TIME ZONE, PRIMARY KEY ("id"));
--SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a, pg_namespace s WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'parcels' AND s.oid = t.relnamespace AND s.nspname = 'survey_temp_demo' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
--DROP TABLE IF EXISTS "user_projects" CASCADE;
CREATE TABLE IF NOT EXISTS "user_projects" ("userId" INTEGER NOT NULL  REFERENCES "users" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "projectId" INTEGER NOT NULL  REFERENCES "projects" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "status" INTEGER DEFAULT 1, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "deletedAt" TIMESTAMP WITH TIME ZONE, UNIQUE ("userId", "projectId"), PRIMARY KEY ("userId","projectId"));
--SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a, pg_namespace s WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'user_projects' AND s.oid = t.relnamespace AND s.nspname = 'survey_temp_demo' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
--DROP TABLE IF EXISTS "parcel_uploads" CASCADE;
CREATE TABLE IF NOT EXISTS "parcel_uploads" ("parcelId" INTEGER NOT NULL  REFERENCES "parcels" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "uploadId" INTEGER NOT NULL  REFERENCES "uploads" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "status" INTEGER DEFAULT 1, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "deletedAt" TIMESTAMP WITH TIME ZONE, UNIQUE ("parcelId", "uploadId"), PRIMARY KEY ("parcelId","uploadId"));
--SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a, pg_namespace s WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'parcel_uploads' AND s.oid = t.relnamespace AND s.nspname = 'survey_temp_demo' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
--DROP TABLE IF EXISTS "pole_uploads" CASCADE;
CREATE TABLE IF NOT EXISTS "pole_uploads" ("poleId" INTEGER NOT NULL  REFERENCES "poles" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "uploadId" INTEGER NOT NULL  REFERENCES "uploads" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "status" INTEGER DEFAULT 1, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "deletedAt" TIMESTAMP WITH TIME ZONE, UNIQUE ("poleId", "uploadId"), PRIMARY KEY ("poleId","uploadId"));
--SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a, pg_namespace s WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'pole_uploads' AND s.oid = t.relnamespace AND s.nspname = 'survey_temp_demo' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
--DROP TABLE IF EXISTS "segment_uploads" CASCADE;
CREATE TABLE IF NOT EXISTS "segment_uploads" ("segmentId" INTEGER NOT NULL  REFERENCES "segments" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "uploadId" INTEGER NOT NULL  REFERENCES "uploads" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "status" INTEGER DEFAULT 1, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "deletedAt" TIMESTAMP WITH TIME ZONE, UNIQUE ("segmentId", "uploadId"), PRIMARY KEY ("segmentId","uploadId"));
--SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a, pg_namespace s WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'segment_uploads' AND s.oid = t.relnamespace AND s.nspname = 'survey_temp_demo' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
--DROP TABLE IF EXISTS "station_uploads" CASCADE;
CREATE TABLE IF NOT EXISTS "station_uploads" ("stationId" INTEGER NOT NULL  REFERENCES "stations" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "uploadId" INTEGER NOT NULL  REFERENCES "uploads" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "status" INTEGER DEFAULT 1, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "deletedAt" TIMESTAMP WITH TIME ZONE, UNIQUE ("stationId", "uploadId"), PRIMARY KEY ("stationId","uploadId"));
--SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a, pg_namespace s WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'station_uploads' AND s.oid = t.relnamespace AND s.nspname = 'survey_temp_demo' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
--DROP TABLE IF EXISTS "poi_uploads" CASCADE;
CREATE TABLE IF NOT EXISTS "poi_uploads" ("poiId" INTEGER NOT NULL  REFERENCES "pois" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "uploadId" INTEGER NOT NULL  REFERENCES "uploads" ("id") ON DELETE CASCADE ON UPDATE CASCADE, "status" INTEGER DEFAULT 1, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "deletedAt" TIMESTAMP WITH TIME ZONE, UNIQUE ("poiId", "uploadId"), PRIMARY KEY ("poiId","uploadId"));




`;
